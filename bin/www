#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app').app;
var ip = require('../app').ip;
var debug = require('debug')('nodejs-webserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var ioPort = normalizePort(process.env.PORT || '3484');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var ioServer = http.createServer();
console.log('Server nodejs giao tiếp esp8266 chạy ở ip: ' + ip.address() + ':' + port);
console.log('Server webapp chạy ở ip: ' + ip.address() + ':' + ioPort);
/**
 * Socket.io
 */
var socketApi = require('../api/socketApi');
var io = socketApi.io;
/**
 * Listen on provided port, on all network interfaces.

 */

server.listen(port);
ioServer.listen(ioPort);
io.attach(server);
io.attach(ioServer);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
